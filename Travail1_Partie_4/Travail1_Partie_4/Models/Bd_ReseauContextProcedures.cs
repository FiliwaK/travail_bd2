// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using Travail1_Partie_4.Models;

namespace Travail1_Partie_4.Models
{
    public partial class Bd_ReseauContext
    {
        private IBd_ReseauContextProcedures _procedures;

        public virtual IBd_ReseauContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new Bd_ReseauContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IBd_ReseauContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class Bd_ReseauContextProcedures : IBd_ReseauContextProcedures
    {
        private readonly Bd_ReseauContext _context;

        public Bd_ReseauContextProcedures(Bd_ReseauContext context)
        {
            _context = context;
        }

        public virtual async Task<int> MettreAJourStockAsync(int? id_piece, int? id_projet, int? quantite_impute, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id_piece",
                    Value = id_piece ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "id_projet",
                    Value = id_projet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "quantite_impute",
                    Value = quantite_impute ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[MettreAJourStock] @id_piece = @id_piece, @id_projet = @id_projet, @quantite_impute = @quantite_impute", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RechercherPieceParNumeroIndustrieResult>> RechercherPieceParNumeroIndustrieAsync(string noIndustrie, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "noIndustrie",
                    Size = 200,
                    Value = noIndustrie ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RechercherPieceParNumeroIndustrieResult>("EXEC @returnValue = [dbo].[RechercherPieceParNumeroIndustrie] @noIndustrie = @noIndustrie", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RechercherProjetsParNumeroIndustrieResult>> RechercherProjetsParNumeroIndustrieAsync(string numeroIndustrie, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "numeroIndustrie",
                    Size = 400,
                    Value = numeroIndustrie ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RechercherProjetsParNumeroIndustrieResult>("EXEC @returnValue = [dbo].[RechercherProjetsParNumeroIndustrie] @numeroIndustrie = @numeroIndustrie", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
